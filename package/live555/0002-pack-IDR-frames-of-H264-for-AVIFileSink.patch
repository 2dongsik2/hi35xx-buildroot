From a9726802261a6004a6b2f85d3d401031742ebbe6 Mon Sep 17 00:00:00 2001
From: Watson Xu <xuhuashan@gmail.com>
Date: Sun, 14 Apr 2019 23:11:14 +0800
Subject: [PATCH 2/4] pack IDR frames of H264 for AVIFileSink

pack the SPS/PPS/SEI packet of H.264 into IDR frame for AVIFileSink.
---
 liveMedia/AVIFileSink.cpp | 33 +++++++++++++++++++++++++--------
 1 file changed, 25 insertions(+), 8 deletions(-)

diff --git a/liveMedia/AVIFileSink.cpp b/liveMedia/AVIFileSink.cpp
index c9ec147..8339675 100644
--- a/liveMedia/AVIFileSink.cpp
+++ b/liveMedia/AVIFileSink.cpp
@@ -255,6 +255,11 @@ Boolean AVIFileSink::continuePlaying() {
     haveActiveSubsessions = True;
     unsigned char* toPtr = ioState->fBuffer->dataEnd();
     unsigned toSize = ioState->fBuffer->bytesAvailable();
+    // Preserve 4 bytes 'start code' for H264 stream
+    if (strcmp(subsession->codecName(), "H264") == 0) {
+      toPtr += 4;
+      toSize -= 4;
+    }
     subsessionSource->getNextFrame(toPtr, toSize,
 				   afterGettingFrame, ioState,
 				   onSourceClosure, ioState);
@@ -491,6 +496,22 @@ void AVISubsessionIOState::afterGettingFrame(unsigned packetDataSize,
   if (fBuffer->bytesInUse() == 0) {
     fBuffer->setPresentationTime(presentationTime);
   }
+
+  if (strcmp(fOurSubsession.codecName(), "H264") == 0) {
+    unsigned char *framePtr = fBuffer->dataEnd();
+    // Insert a 'start code' (0x00 0x00 0x00 0x01) in front of the frame:
+    framePtr[0] = 0x00; framePtr[1] = 0x00;
+    framePtr[2] = 0x00; framePtr[3] = 0x01;
+    fBuffer->addBytes(4);
+    unsigned char nalu_type = framePtr[4] & 0x1f;
+    // SPS/PPS/SEI packet should be packed into the following IDR frame
+    if ((nalu_type == 6) || (nalu_type == 7) || (nalu_type == 8)) {
+      fBuffer->addBytes(packetDataSize);
+      fOurSink.continuePlaying();
+      return;
+    }
+  }
+
   fBuffer->addBytes(packetDataSize);
 
   useFrame(*fBuffer);
@@ -534,22 +555,18 @@ void AVISubsessionIOState::useFrame(SubsessionBuffer& buffer) {
   }
 
   // Add an index record for this frame:
+  int firstByte = (strcmp(fOurSubsession.codecName(), "H264") == 0) ? \
+                  frameSource[4] : frameSource[0];
   AVIIndexRecord* newIndexRecord
     = new AVIIndexRecord(fAVISubsessionTag, // chunk id
-			 AVIIF_KEYFRAME, // flags
+			 frameSource[0] == 0x67 ? AVIIF_KEYFRAME : 0, // flags
 			 4 + fOurSink.fNumBytesWritten, // offset (note: 4 == 'movi')
 			 frameSize); // size
   fOurSink.addIndexRecord(newIndexRecord);
 
   // Write the data into the file:
   fOurSink.fNumBytesWritten += fOurSink.addWord(fAVISubsessionTag);
-  if (strcmp(fOurSubsession.codecName(), "H264") == 0) {
-    // Insert a 'start code' (0x00 0x00 0x00 0x01) in front of the frame:
-    fOurSink.fNumBytesWritten += fOurSink.addWord(4+frameSize);
-    fOurSink.fNumBytesWritten += fOurSink.addWord(fourChar(0x00, 0x00, 0x00, 0x01));//add start code
-  } else {
-    fOurSink.fNumBytesWritten += fOurSink.addWord(frameSize);
-  }
+  fOurSink.fNumBytesWritten += fOurSink.addWord(frameSize);
   fwrite(frameSource, 1, frameSize, fOurSink.fOutFid);
   fOurSink.fNumBytesWritten += frameSize;
   // Pad to an even length:
-- 
2.23.0

