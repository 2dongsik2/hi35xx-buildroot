diff -uNr a/liveMedia/QuickTimeFileSink.cpp b/liveMedia/QuickTimeFileSink.cpp
--- a/liveMedia/QuickTimeFileSink.cpp	2017-10-28 08:26:18.000000000 +0800
+++ b/liveMedia/QuickTimeFileSink.cpp	2018-06-03 22:23:06.813776395 +0800
@@ -395,6 +395,11 @@
     haveActiveSubsessions = True;
     unsigned char* toPtr = ioState->fBuffer->dataEnd();
     unsigned toSize = ioState->fBuffer->bytesAvailable();
+    // Preserve 4 bytes 'start code' for H264 stream
+    if (strcmp(subsession->codecName(), "H264") == 0) {
+      toPtr += 4;
+      toSize -= 4;
+    }
     subsessionSource->getNextFrame(toPtr, toSize,
 				   afterGettingFrame, ioState,
 				   onSourceClosure, ioState);
@@ -730,6 +735,22 @@
   if (fBuffer->bytesInUse() == 0) {
     fBuffer->setPresentationTime(presentationTime);
   }
+
+  if (strcmp(fOurSubsession.codecName(), "H264") == 0) {
+    unsigned char *framePtr = fBuffer->dataEnd();
+    // Insert a 'start code' (0x00 0x00 0x00 0x01) in front of the frame:
+    framePtr[0] = 0x00; framePtr[1] = 0x00;
+    framePtr[2] = 0x00; framePtr[3] = 0x01;
+    fBuffer->addBytes(4);
+    unsigned char nalu_type = framePtr[4] & 0x1f;
+    // SPS/PPS/SEI packet should be packed into the following IDR frame
+    if ((nalu_type == 6) || (nalu_type == 7) || (nalu_type == 8)) {
+      fBuffer->addBytes(packetDataSize);
+      fOurSink.continuePlaying();
+      return;
+    }
+  }
+
   fBuffer->addBytes(packetDataSize);
 
   // If our RTP source is a "QuickTimeGenericRTPSource", then
